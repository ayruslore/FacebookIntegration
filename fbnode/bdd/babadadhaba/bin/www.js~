/* Vaibhav Aggarwal 4 july,2017 */

'use strict';
const express = require('express');
const bodyParser = require('body-parser');
const request = require('request');
const path = require('path');
const apiaiApp = require('apiai')('9afd07100b9a4f27ae0f03eda9e3c752');
var messengerButton = "<html><head><title>Facebook Messenger Bot</title></head><body><h1>Facebook Messenger Bot</h1>This is a bot based on Messenger Platform QuickStart. For more details, see their <a href=\"https://developers.facebook.com/docs/messenger-platform/guides/quick-start\">docs</a>.<script src=\"https://button.glitch.me/button.js\" data-style=\"glitch\"></script><div class=\"glitchButton\" style=\"position:fixed;top:20px;right:20px;\"></div></body></html>";
//var mongo = require('mongodb');
//var MongoClient = require('mongodb').MongoClient;
//var url = "mongodb://localhost:27017/mydb";
var http = require('http');
var Promise = require("bluebird");
var request_1 = Promise.promisifyAll(require("request"));
var activelink ='http://129.144.182.67:4000/';
var recommendationLink = 'http://129.144.182.67:3000/';
let token = 'EAADg7MiZAzmsBAMIBZAZB0ui8VdYUZCp5jGOCIqhv3KHssJ1RHVusnsOjiTTC1WW6tqA4mrFZC6ZAP8uvUI8FjpAZBgG94VZAZBCIZB959EqOw0VMNLp1YQgK4hccvNPrdkfEooTOFEhq3tVZAVSGtsrjjBU6f9V4ZAcxbm88lkfy1zRvgZDZD';


// The rest of the code implements the routes for our Express server.
let app = express();
let aiText="";
let biText={};
let flag = 0;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  	extended: true
}));

// Webhook validation
app.get('/', function(req, res) {
  	if (req.query['hub.mode'] === 'subscribe' &&
  	    req.query['hub.verify_token'] === 'tuxedo_cat') {
	    	console.log("Validating webhook");
	    	res.status(200).send(req.query['hub.challenge']);
	} 
	else {
	    	console.error("Failed validation. Make sure the validation tokens match.");
	    	res.sendStatus(403);
	}
});

// Display the web page
app.get('/', function(req, res) {
  	res.writeHead(200, {'Content-Type': 'application/json'});
  	res.write(messengerButton);
  	res.end();
});

// Message processing
app.post('/', function (req, res) {
  	console.log(req.body);
  	var data = req.body;

  	// Make sure this is a page subscription
  	if (data.object === 'page') {	

    		// Iterate over each entry - there may be multiple if batched
    		data.entry.forEach(function(entry) {
      			var pageID = entry.id;
      			var timeOfEvent = entry.time;

      			// Iterate over each messaging event
      			entry.messaging.forEach(function(event) {
        			if (event.message) {
          				console.log('object:'+JSON.stringify(event.message));
          				if(("quick_reply" in event.message)==true){
        				QuickReplyParser(event.sender.id, event.message.quick_reply.payload);
          				}
					else if ("attachments" in event.message){
						if (event.message.attachments[0].type=="location"){
							console.log(event.message.attachments[0].payload);
							var title=["Yes","No, continue to payment"];
							var payload=["Save_address:{ Lat: "+event.message.attachments[0].payload.coordinates.lat+", Long: "+event.message.attachments[0].payload.coordinates.long+"}", "Payment: { Lat:"+event.message.attachments[0].payload.coordinates.lat+", Long: "+event.message.attachments[0].payload.coordinates.long+"}"];
							sendQuickreply(event.sender.id,"would you like to save this address?",title,payload);
						}
						else
							console.log("other attachment");
					}
          				else{
            					sendMessage(event);
        				}
	      			} 
				else if (event.postback) {
            				receivedPostback(event);
        			} 
				else {
			   	        console.log("Webhook received unknown event: ", event);
        			}
      			});

    		});

    // Assume all went well.
    //
    // You must send back a 200, within 20 seconds, to let us know
    // you've successfully received the callback. Otherwise, the request
    // will time out and we will keep trying to resend.
    	res.sendStatus(200);
  	}
});


//function to call api.ai
function sendMessage(event){
	let sender=event.sender.id;
	let text=event.message.text;


	let apiai = apiaiApp.textRequest(text, {
    		sessionId: sender // use any arbitrary id
  	});


	//sending response to facebook
  	apiai.on('response', (response) => {
  		console.log(response);
		//whenever we have something we can tell about we'll drag them to our recommendation engine
		//recommend.specials,recommend.dish
	
 		if(response.result.action==='recommend.specials'){
   			//cards
   			console.log("1");
   			var final= recommendationLink + 'specials';
			callrecommend(final,sender);
  		}
  		else if(response.result.action==='recommend.dish'){
   			//cards
   			var vnv ='k';
   			if (response.result.parameters.vnv!='')
      				vnv =response.result.parameters.vnv;
   			var bi ='k';
   			if (response.result.parameters.bi!='')
      				bi =response.result.parameters.bi;
   			var cat ='k';
   			if (response.result.parameters.cat!='')
      				cat =response.result.parameters.cat
   			var final = recommendationLink + 'recommend/'+vnv +'/'+bi+'/'+cat;
   			callrecommend(final,sender);
   		}
  		else if(response.result.action==='order.webview'){
   			var link="http://ec2-13-58-254-247.us-east-2.compute.amazonaws.com" + "?userId=" + sender;
    			sendButton(sender,"what would to like to have?",link,"Show Menu!","tall");
    			//open webview
  		}
  		else if(response.result.action==='input.welcome'){
   			aiText=response.result.fulfillment.speech;
			var title=["Show me today's specials", "Recommend something", "Show me the menu"];
			var payload=["Show_specials","Recommend","Show_menu"];
			sendQuickreply(sender,aiText,title,payload);
  		}
  		else if(response.result.action==='order.dish'){
      			var dish=response.result.parameters.Dish;
      			var quantity=response.result.parameters.number;
      			console.log(dish);
      			var dict = {};
      			var newdish=[];
      			for(var j=0;j<dish.length;j++){
        			newdish[j] = dish[j].replace(/\s+/g, '_');
      			}
      			console.log(dish);
      			for(var i=0;i<dish.length;i++){
        			dict[newdish[i]]=quantity[i];
      			}
      			var myjson= JSON.stringify(dict);
      			var add ='cart/' + sender + '/add/' + myjson.toLowerCase();
      			//callSendRedis(add);
      			var final = activelink + add;
      			aiText=response.result.fulfillment.speech;
       			callSendRedisapi('add',final,sender,aiText);
 		}
		else if (response.result.action=== "process_card.process_card-selectnumber"){
			var dish=response.result.parameters.dish;
			var number=response.result.parameters.number;
			var dict={};
			dict[dish]=number;
		        var myjson= JSON.stringify(dict);
			console.log(myjson);
			var finalDict="";
			for (var i=0;i<myjson.length;i++)
			{ 
				if (myjson[i]===' ')
					finalDict+='_';
				else
					finalDict+=myjson[i];
			}
			finalDict=finalDict.toLowerCase();
		        var add ='cart/' + sender + '/add/' + finalDict;
		        var final = activelink + add;
		        //console.log(add);
			var reply= response.result.fulfillment.speech;
		        //var reply="A "+ payload + " has been added";
		        callSendRedisapi('add',final,sender,reply);
		}  
 		else if(response.result.action==='show.menu'){
  			//webview
    			var link="http://ec2-13-58-254-247.us-east-2.compute.amazonaws.com" + "?userId=" + sender;
  			sendButton(sender,"what would to like to have?",link,"Show Menu!","tall");
  		}
  		else if(response.result.action==='order.cancel'){
    			//cancel
    			var cancel='cart/' + sender + '/cancel';
    			final =activelink + cancel;
     			aiText=response.result.fulfillment.speech;
    			callSendRedisapi('cancel',final,sender,aiText);
  		}
  		else if(response.result.action==='order.remove'){
    			//redis remove commmand	
      			var dish=response.result.parameters.Dish;
      			var quantity=response.result.parameters.number;
      			console.log(dish);
      			var dict = {};
      			var newdish=[];
      			for(var j=0;j<dish.length;j++){
        			newdish[j] = dish[j].replace(/\s+/g, '_');
      			}
      			console.log(dish);
      			for(var i=0;i<dish.length;i++){
			        dict[newdish[i]]=-quantity[i];
      			}
      			console.log("remove",dict);
      			var myjson= JSON.stringify(dict);
      			var add ='cart/' + sender + '/add/' + myjson;	
      			var final = activelink + add;
      			console.log('remove : '+add);
       			aiText=response.result.fulfillment.speech;
      			callSendRedisapi('remove',final,sender,aiText);
  		}
   		else if(response.result.action==='order.payment'){
    			//cancel
    			//redis cancel commmand
     			sendReciept(sender);
     			sendButton(sender,'how would you like to pay?',"http://ec2-13-58-254-247.us-east-2.compute.amazonaws.com","RazorPay","tall");
   		}
  		else if(response.result.action==='viewcart'){
    			var show = 'cart/'+sender + '/show';
    			var final= activelink + show;
    			callSendRedis(final,sender);
   		}
  		else if(response.result.action==='order.delete'){
    			var final =activelink + 'cart/' + sender + '/cancel';
    			aiText=response.result.fulfillment.speech;
    			callSendRedisapi('cancel',final,sender,aiText);
  		}
  		else if(response.result.action==='order.confirm' ){
		    	aiText=response.result.fulfillment.speech;
    			sendTextMessage(sender,aiText);
    			var show = 'get_cart_price/'+sender;
    			var final= activelink + show;
    			callSendRedisconfirm(final,sender);
  		}
		else if(response.result.action==='Confirm.Confirm-yes'){
			CustomQuickreply(sender,"Please select a delivery address");
  		}
  		else {
    			console.log("else");
  			aiText = response.result.fulfillment.speech;
			request({
      				url: 'https://graph.facebook.com/v2.6/me/messages',
      				qs: {access_token:token },
      				method: 'POST',
      				json: {
        			recipient: {id: sender},
        			message: {text: aiText}
    	  			}
    			}, (error, response) => {
      				if (error) {
          				console.log('Error sending message: ', error);
      				} else if (response.body.error) {
          				console.log('Error: ', response.body.error);
      				}
    			});
  		}

 	});
  	apiai.on('error', (error) => {
    		console.log(error);
  	});
	apiai.end();
}




// Incoming events handling
function receivedMessage(event) {
  	var senderID = event.sender.id;
  	var recipientID = event.recipient.id;
  	var timeOfMessage = event.timestamp;
  	var message = event.message;

  	console.log("Received message for user %d and page %d at %d with message:",
    	senderID, recipientID, timeOfMessage);
  	console.log(JSON.stringify(message));
  	var messageId = message.mid;
  	var messageText = message.text;
  	var messageAttachments = message.attachments;
  	if (messageText) {
    		// If we receive a text message, check to see if it matches a keyword
    		//and send back the template example. Otherwise, just echo the text we received.
    		switch (messageText) {
      			case 'generic':
        			sendGenericMessage(senderID,messageText);
        		break;
     			case 'Confirm_Yes':
        			sendTextMessage(senderID,messageText);
        		break;
		        default:
        			sendTextMessage(senderID, messageText);
    		}
  	} else if (messageAttachments) {
    		sendTextMessage(senderID, "Message with attachment received");
  	}
}


//postback and payload
function receivedPostback(event) {
  	var senderID = event.sender.id;
  	var recipientID = event.recipient.id;
  	var timeOfPostback = event.timestamp;
  	/* The 'payload' param is a developer-defined field which is set in a postback
  	 button for Structured Messages.*/
  	var payload = event.postback.payload;

  	console.log("Received postback for user %d and page %d with payload '%s' " +
    	"at %d", senderID, recipientID, payload, timeOfPostback);

  	/* When a postback is called, we'll send a message back to the sender to
  	 let them know it was successful*/
 	if (payload) {
    		/* If we receive a text message, check to see if it matches a keyword
    		 and send back the template example. Otherwise, just echo the text we received.*/
  	  	switch (payload) {
  	    		case 'Payload for first bubble':
  		      		sendTextMessage(senderID,payload);
  		      	break;
  	   		case 'Show menu':
  		      		sendGenericMessage_rolls(senderID,messageText);
  		      	break;
  	   		case 'Confirm_Yes':
  		      		sendTextMessage(senderID,payload);
  	    		break;
			default:
  	     			console.log(payload);
				SpecialIntents(payload,senderID);
			break;
  	  	}
  	} 
}

function SpecialIntents(payload,sender){
	let apiai = apiaiApp.textRequest(payload, {
    		sessionId: sender // use any arbitrary id
  	});
	//sending response to facebook
	apiai.on('response', (response) => {
	console.log(response.result.action);

if (response.result.action=== "save.address")
{
	//console.log("QuantityCount");
  	aiText = response.result.fulfillment.speech;
  	//console.log(typeof aiText);
  	//console.log(flag);
 	// }
	//console.log(response.result);
  	//console.log(response.result.parameters.Dish);

  	//console.log("sdfvgbh");
    	//if(flag==0){
      	//console.log(flag);
    	request({
      		url: 'https://graph.facebook.com/v2.6/me/messages',
      		qs: {access_token:token },
      		method: 'POST',
      		json: {
        		recipient: {id: sender},
        		message: {text: aiText}
      		}
    	}, (error, response) => {
      	if (error) {
          	console.log('Error sending message: ', error);
      	} else if (response.body.error) {
          	console.log('Error: ', response.body.error);
      	}
    	});
}
else if (response.result.action=== "process.card")
{
    console.log("QuantityCount");
  aiText = response.result.fulfillment.speech;
  //console.log(typeof aiText);
  //console.log(flag);
 // }
	//console.log(response.result);
  console.log(response.result.parameters.Dish);

  //  console.log("sdfvgbh");
    //if(flag==0){
      //console.log(flag);
    request({
      url: 'https://graph.facebook.com/v2.6/me/messages',
      qs: {access_token:token },
      method: 'POST',
      json: {
        recipient: {id: sender},
        message: {text: aiText}
      }
    }, (error, response) => {
      if (error) {
          console.log('Error sending message: ', error);
      } else if (response.body.error) {
          console.log('Error: ', response.body.error);
      }
    });
  }
});
apiai.on('error', (error) => {
    console.log(error);
  });

  apiai.end();
}


//////////////////////////
// Sending helpers
//////////////////////////
function sendTextMessage(recipientId, messageText) {
  	var messageData = {
    		recipient: {
      			id: recipientId
    		},
    		message: {
      			text: messageText
    		}
	};

  	callSendAPI(messageData);
}

function QuickReplyParser(sender, payload)
{	
	if (payload==='Show_specials'){
		var final= recommendationLink + 'specials';
		callrecommend(final,sender);
	}
	else if (payload==='Recommend'){
			callrecommend(recommendationLink+'recommend/k/k/k',sender);
	}
	else if (payload==='Show_menu'){
			var link="http://ec2-13-58-254-247.us-east-2.compute.amazonaws.com" + "?userId=" + sender;
	  		sendButton(sender,"what would to like to have?",link,"Show Menu!","tall");
	}
	else if (payload==='Show_cart'){
			var show = 'cart/'+sender + '/show';
	    		var final= activelink + show;
	    		callSendRedis(final,sender);
	}
	else if (payload==='Clear_order'){
			var cancel='cart/' + sender + '/cancel';
	    		final =activelink + cancel;
	     		aiText='Your cart has been cleared. Is there anything else I can help you with?';
	    		callSendRedisapi('cancel',final,sender,aiText);
	}
	else if (payload==='Confirm_order'){
			aiText="Do you want to confirm this order?";
    			sendTextMessage(sender,aiText);
			var show = 'get_cart_price/'+sender;
    			var final= activelink + show;
   			callSendRedisconfirm(final,sender);
	}
	else if (payload==='Confirm_yes'){
			CustomQuickreply(sender,"Please choose your delivery address");
	}
	else if(payload==='Location1'){
		console.log("Selected location:"+payload);
		}
	else if(payload.search('Payment')>=0){
		var link = activelink +sender+'/set_address/' +JSON.stringify(payload.replace(/\s+/g, '_'));
		console.log(link);
		callSendRedisapi('payment',sender,link,"How would you like to pay?");
		
	}
		
	else if (payload.search('Save_address')>=0){
		console.log("address saving");
		if(payload.search('Location1')>=0){
		console.log(JSON.stringify(payload)+"locationa1");
		var link = activelink + 'cart/'+sender+'/address/{"location1":'+JSON.stringify(payload.replace(/\s+/g, '_'))+'}';
		//console.log(link);replace(/\s+/g, '_');
		callSendRedisAddress(link,sender);
		}
		else if(payload.search('Location2')>=0){
		console.log(payload+"locationa2");
		var link = activelink + 'cart/'+sender+'/address/{"location2":'+JSON.stringify(payload.replace(/\s+/g, '_'))+'}';
		callSendRedisAddress(link,sender);
		}
		else if(payload.search('Location3')>=0){
		console.log(payload+"locationa3");
		var link = activelink + 'cart/'+sender+'/address/{"location3":'+JSON.stringify(payload.replace(/\s+/g, '_'))+'}';
 		callSendRedisAddress(link,sender);
		}
		else if(payload.search('Location4')>=0){
		console.log(payload+"locationa4");
		var link = activelink + 'cart/'+sender+'/address/{"location4":'+JSON.stringify(payload.replace(/\s+/g, '_'))+'}';
		callSendRedisAddress(link,sender);
		}
		else{
		var title=["Address1","Address2","Address3","Address4"];
		var payloadArr=["Location1_"+payload,"Location2_"+payload,"Location3_"+payload,"Location4_:"+payload];
		sendQuickreply(sender,"Save it as",title,payloadArr);
		}
	}
	
	console.log(payload); 
}

function CustomQuickreply(recipientId,text)
{
 	var messageData = {
  		"recipient":{
    			"id":recipientId
  		},
  		"message":{
    		"text":text,
    		"quick_replies":[
      			{
        		"content_type":"location",
      			}
    		]
  		}
	};
	callSendAPI(messageData);
}

function sendQuickreply(recipientId,text,title,payload) {
  	//console.log(event.message.text);
  	var messageData = {

   		recipient :{
      			id: recipientId
    		},
    		message: {
			text:text,
	    		quick_replies:[
			]
	  	}
	};
	var filler;
	for (var i=0;i<title.length;i++)
	{
		filler ={
			content_type:"text",
			title:title[i],
			payload:payload[i]
			};
		messageData.message.quick_replies.push(filler);
	}
	console.log(JSON.stringify(messageData));
	callSendAPI(messageData);
	//  console.log("before if conditon");
	//  console.log(event.message.text);
}

function sendButton(recipientId,text,link,caption,size){
  var messageData={recipient:{
    id:recipientId
  },
  message:{
    attachment:{
      type:"template",
      payload:{
        template_type:"button",
        text:text,
        buttons:[
          {
            type:"web_url",
            url:link,
            title:caption,
            webview_height_ratio:size
          }
        ]
      }
    }
  }
}; callSendAPI(messageData);
}


function toTitleCase(str){
        return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
      }

function dataRequest(recipientId,titles,images){
  console.log("called");
  var title=titles;
  var imageurl=images;
  var cards =new Array(title.length);
  //console.log(cards);
  var string;
  var i;
   for(var j=0;j<titles.length;j++){
        title[j] = toTitleCase(titles[j].replace(/_/g, ' '));

      }
  for(i=0;i<title.length;i++){
    string=makeJson(title[i],imageurl[i]);
   // console.log(string[i]);
    cards[i]=string;
    //console.log(cards);

  }
 	console.log(cards);
 /* var final=new Array(2);
  final.push(cards[0]);
  final.push(cards[1]);*/
//  console.log(final);
  var messageData = {

   recipient :{
      id: recipientId
    },
    message: {
      attachment: {
        type: "template", 
        payload: {
          template_type: "generic",
          elements:cards
        }
      }
    }
  };
  //console.log(messageData);
 // console.log(messageData.message.attachment.payload);
  callSendAPI(messageData);  
}

app.get('/payments', function (req, res) {
  //res.send('hello world')
  //console.log(res);
	//console.log(req);
  var paymentId=req.query.key;
  console.log(req.query.key);
  console.log(req.query.Id);

 /* if(paymentId){
   console.log(instance.payments.fetch(paymentId));
   var operation = activelink 	 ;
	}*/
});


function sendReciept(recipientID,titles,quantity,price,total){

  var cards =new Array(titles.length);
  console.log(cards);
  var string;
  var i;
   for(var j=0;j<titles.length;j++){
        titles[j] = toTitleCase(titles[j].replace(/_/g, ' '));

      }
  for(i=0;i<titles.length;i++){
    string=makeJsonreceipt(titles[i],quantity[i],price[i]);
   // console.log(string[i]);
    cards[i]=string;
    console.log(cards);

  }
  var messageData={"recipient":{
    id:recipientID
  },
  message:{
    attachment:{
      type:"template",
      payload:{
        template_type:"receipt",
        recipient_name:"Customer",
        order_number:recipientID,
        currency:"INR",
        payment_method:"Razorpay",        
        order_url:"http://babadadhaba.co/",
        timestamp:"1428444852", 
        elements:cards,
        address:{
          street_1:"Sector-6",
          street_2:"",
          city:"Karnal",
          postal_code:"132001",
          state:"HARYANA",
          country:"INDIA"
        },
        summary:{
          subtotal:1000,
          shipping_cost:4.95,
          total_tax:6.19,
          total_cost: total
        },
        adjustments:[
          {
            name:"New Customer Discount",
            amount:20
          },
          {
            name:"10 Off Coupon",
            amount:10
          }
        ]
      }
    }
  }
};callSendAPI(messageData);
}

function makeJsonreceipt(title,quantity,price){
  var elements={

            title: title,
           // subtitle: "Next-generation virtual reality",
            //item_url: "https://www.oculus.com/en-us/rift/",
            quantity : quantity,
            price : price,
            currency:"INR",
            image_url:"http://assets.limetray.com/assets/user_images/logos/original/Logos_1464774908.png"
                    }
  return elements;
}

function makeJson(title,imageurl){
  var elements={

            title: title,
           // subtitle: "Next-generation virtual reality",
            //item_url: "https://www.oculus.com/en-us/rift/",
            image_url:imageurl,
            //webview_height_ratio: "compact",
            buttons: [{
              type: "postback",
              title: "Buy "+ title,
              payload: "dish.buying:" + title
            }],
          }
  return elements;
}

function callSendRedisapi(tag,operation,sender,aiText){
  	request_1.getAsync({
    	url:operation,
    	method: 'GET'
	}).then(function(res,err){
  	var body = ''; // Will contain the final response
  	// Received data is a buffer.
  	// Adding it to our body
  	console.log("final");
  	if(err) throw err;
  	console.log(res.body);
 	// sendTextMessage(sender,aiText);
  	//return res.body
   	//console.log(body);
	if (tag==='add'){
		var title=["Show cart", "Clear cart", "confirm order"];
		var payload=["Show_cart","Clear_cart","Confirm_order"];
		sendQuickreply(sender,aiText,title,payload);
	}
	else if (tag==='payment'){
		link= "http://ec2-13-58-254-247.us-east-2.compute.amazonaws.com?"+sender;
		sendButton(sender,'how would you like to pay?',link,"RazorPay","tall");
	} 
	else if (tag==='cancel'){
		var title=["Show me today's specials", "Recommend something", "Show me the menu"];
		var payload=["Show_specials","Recommend","Show_menu"];
		sendQuickreply(sender,aiText,title,payload);
	}
	else if (tag==='remove'){
		var title=["Show cart", "Clear cart", "confirm order"];
		var payload=["Show_cart","Clear_cart","Confirm_order"];
		sendQuickreply(sender,aiText,title,payload);
	}
	else{
     		request({
      			url: 'https://graph.facebook.com/v2.6/me/messages',
      			qs: {access_token:token },
      			method: 'POST',
      			json: {
        			recipient: {id: sender},
        			message: {text: aiText}
      			}
    		}, (error, response) => {
      			if (error) {
          			console.log('Error sending message: ', error);
      			} else if (response.body.error) {
          			console.log('Error: ', response.body.error);
      			}
    		});
	}
});
}

function callSendRedis(operation,sender){
	console.log("called");
  	request_1.getAsync({
    	url:operation,
    	method: 'GET'
}).then(function(res,err){
	var body = ''; // Will contain the final response
  	console.log("final");
  	if(err) throw err;
  	console.log(res.body);
	if (res.body==='{}')
	{	
		aiText="I am sorry but you have no items in your cart";	
		var title=["Show me today's specials", "Recommend something", "Show me the menu"];
		var payload=["Show_specials","Recommend","Show_menu"];
		sendQuickreply(sender,aiText,title,payload);
	}
	else{
	   	var dict=JSON.parse(res.body)
   		var c="";
	   	for (var key in dict) {
   			c+= key.replace(/_/g, ' ')+" : "+dict[key]+"\n";//crerating final string in UX friendly format
    		//console.log(c);
		}
		var title=[ "Clear cart", "confirm order"];
		var payload=["Clear_cart","Confirm_order"];	
		sendQuickreply(sender,c,title,payload);
   	}
});
}

function callSendRedisAddress(operation,sender){
	console.log("called");
  	request_1.getAsync({
    	url:operation,
    	method: 'GET'
}).then(function(res,err){
	var body = ''; // Will contain the final response
  	console.log("final");
  	if(err) throw err;
  	console.log(res.body);
   	/*var dict=JSON.parse(res.body)
   	var c="";
   	for (var key in dict) {
   		c+= key.replace(/_/g, ' ')+" : "+dict[key]+"\n";//crerating final string in UX friendly format
    		//console.log(c);
	}*/
	sendTextMessage(sender,res.body);
	
   	
});
}


function callSendRedisconfirm(operation,sender){
  request_1.getAsync({
    url:operation,
    method: 'GET'
}).then(function(res,err){
  var body = ''; // Will contain the final response
  // Received data is a buffer.
  // Adding it to our body
  //console.log("final");
  if(err) throw err;
  console.log(res.body);
	var total=0;
   	var keys =[];
   	var quantity=[];
	var price=[];
   var dict=JSON.parse(res.body)
   for (var key in dict) {
    console.log(key);
    console.log(dict[key]);
	if (key!="total"){
		keys.push(key);
    		quantity.push(dict[key][1]);
		price.push(dict[key][0]);
    	}
	else
	{	total=dict[key];
	}
}
console.log(keys);
   /*for(var i in dict){

    c = i; 
    console.log(i);
   }*/
	CartForConfirmation(sender,keys,quantity,total);
   console.log(quantity);
  //sendReciept(sender,keys,quantity,price,total);
  // sendTextMessage(sender,c);
   console.log("getyou");
});
}

function CartForConfirmation(sender,keys,quantity,total)
{
	var msg=' '
	for (var i=0;i<keys.length;i++)
	{
		msg= msg + keys[i] + ' : ' + quantity[i] + '\n';
	}
	msg = msg + 'Total value: ' + total;
	var title=[ "Yes", "Clear"];
	var payload=["Confirm_yes","Clear_order"];
	sendQuickreply(sender,msg,title,payload);
}

function callrecommend(operation,sender){
  request_1.getAsync({
    url:operation,
    method: 'GET'
}).then(function(res,err){
  var body = ''; // Will contain the final response
  // Received data is a buffer.
  // Adding it to our body
  //console.log(res.body);
  var dict=JSON.parse(res.body)
  //console.log(dict["reco"]);
  var rec=dict["reco"];
  //console.log(rec);
   var c='';
   var links =dict["links"];
  rec.forEach(function(value){
    //console.log(value);
  c+=value +'\n';
    //console.log(c);
  });
 
  
  c="you can try !\n" + c;
  dataRequest(sender,rec,links);
 //sendTextMessage(sender,c);
  console.log("");

});
}

function callSendAPI(messageData) {
  request({
    uri: 'https://graph.facebook.com/v2.6/me/messages',
    qs: { access_token: token },
    method: 'POST',
    json: messageData

  }, function (error, response, body) {
    if (!error && response.statusCode == 200) {
     var recipientId = body.recipient_id;
      var messageId = body.message_id;

      console.log("Successfully sent generic message with id %s to recipient %s",
        messageId,recipientId);
    } else {
      console.error("Unable to send message.");
      console.error(response);
      console.error(error);
    }
  });
}

// Set Express to listen out for HTTP requests
var server = app.listen(process.env.PORT || 5000, function () {
  console.log("Listening on port %s", server.address().port);
});

